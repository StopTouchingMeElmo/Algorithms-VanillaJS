//Операторы Async/await - это синтаксический сахар, который позволяет удобно программировать асинхронность.
//Внутри все те же промисы.

//Чтобы использовать оператор await, который обрабатывает и ждет завершение промиса, нужно у РОДИТЕЛЬСКОЙ функции использовать
//префикс async.
//далее мы используем оператор await перед промисом,
//и тот результат, который попадает в метод then(при работе с промисами) мы можем просто синхронно получить в отдельную переменную.
//Что позволяет избавиться от callback'ов, что делает код более читаемым и компактным.


//Наглядный пример реализации одинакового функционала через обычные промисы и через async/await:

//Реализуем функцию задержки через промис, более удобную форму, чем setTimeout
const delay = ms => {
    return new Promise(resolve => setTimeout(() => resolve(), ms))
}

//delay(5000).then(() => console.log('5sec'))

//Задача:
//Делаем асинхронный запрос на сервер и получаем данные, добавляем к этому искусственную задержку,
//чтобы построить цепочку из промисов.

//Для эмитации работы с сервером используем сервис https://jsonplaceholder.typicode.com/
//Fake Online REST API for Testing and Prototyping
const url = 'https://jsonplaceholder.typicode.com/todos'

// 1. Через промисы:
// Для того, чтобы сделать запрос на сервер через промисы мы можем воспользоваться нативной функцией браузера fetch.
// fetch это некий аналог ajax'а, который делает асинхронный запрос и возвращает нам промис.
// Далее мы обращаемся к методу then, в котором получаем некий response от полученного с сервера промиса,
// Далее, чтобы получить json, который прилетает с сервера, мы у объекта response должны вызвать метод json (api метода fetch).
function fetchTodos() {
    console.log('Fetch Todo started...')
    return delay(3000)
        .then(() => fetch(url))
        .then(response => response.json())
}
fetchTodos() // вызываем функцию fetchTodos(), которая возвращает промис, а значит доступен метод then
    .then((data) => console.log('Data:', data))
    .catch(e => console.error(e))

// 2. Через async/await
// Те функции, которые внутри применяют оператор await должны быть асинхронными. Речь о верхнеуровневой функции.
async function fetchAsyncTodos() {

}